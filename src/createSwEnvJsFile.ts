import * as fs from "fs";
import { nameOfTheGlobal } from "./constants";
import { join as pathJoin } from "path";

type Params = {
    distDirPath: string;
    mergedEnv: Record<string, unknown>;
};

export function createSwEnvJsFile(params: Params) {
    const { distDirPath, mergedEnv } = params;

    const envWithValuesInBase64 = Object.fromEntries(
        Object.entries(mergedEnv).map(([key, value]) => [
            key,
            Buffer.from(JSON.stringify(value), "utf8").toString("base64")
        ])
    );

    const swEnv = [
        `// NOTE: This file is auto-generated by vite-envs.`,
        `// It enables you to access environment variables in your service worker.`,
        `// To use it, use \`importScripts("swEnv.js")\` at the top of your worker file.`,
        `// (Assuming your worker file is next to this file)`,
        `// Then you can access your environment variables via \`self.${nameOfTheGlobal}.MY_VAR\``,
        ``,
        `const envWithValuesInBase64 = ${JSON.stringify(envWithValuesInBase64, null, 2)
            .replace(/^"/, "")
            .replace(/"$/, "")};`,
        `const env = {};`,
        `Object.keys(envWithValuesInBase64).forEach(function (name) {`,
        `    env[name] = JSON.parse(`,
        `      new TextDecoder().decode(`,
        `        Uint8Array.from(`,
        `          atob(envWithValuesInBase64[name]),`,
        `          c => c.charCodeAt(0)`,
        `        )`,
        `      )`,
        `    );`,
        `});`,
        `self.${nameOfTheGlobal} = env;`
    ].join("\n");

    fs.writeFileSync(pathJoin(distDirPath, "swEnv.js"), Buffer.from(swEnv, "utf8"));
}
